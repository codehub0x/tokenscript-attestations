/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 19-Nov-2019.
 */
package id.attestation;

import com.objsys.asn1j.runtime.*;

public class TicketDataObject_class_ extends Asn1Enumerated {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "ENUMERATED";
   }

   // Integer constants for switch-case
   public static final int _CLUB = 0;
   public static final int _LOUNGE = 1;
   public static final int _SILVER = 2;
   public static final int _GOLD = 3;

   // Singleton instances of TicketDataObject_class_
   protected static final TicketDataObject_class_ _club = new TicketDataObject_class_(0);
   protected static final TicketDataObject_class_ _lounge = new TicketDataObject_class_(1);
   protected static final TicketDataObject_class_ _silver = new TicketDataObject_class_(2);
   protected static final TicketDataObject_class_ _gold = new TicketDataObject_class_(3);

   /**
    * Enumerated constructor: this object must be initialized with one 
    * of the following values:
    *   0
    *   1
    *   2
    *   3
    */
   protected TicketDataObject_class_ (int value_) {
      super (value_);
   }

   /**
    * Singleton accessor method for club.
    */
   public static TicketDataObject_class_ club() {
      return _club;
   }

   /**
    * Singleton accessor method for lounge.
    */
   public static TicketDataObject_class_ lounge() {
      return _lounge;
   }

   /**
    * Singleton accessor method for silver.
    */
   public static TicketDataObject_class_ silver() {
      return _silver;
   }

   /**
    * Singleton accessor method for gold.
    */
   public static TicketDataObject_class_ gold() {
      return _gold;
   }

   public static final Decoder DECODER = new Decoder();

   public static class Decoder implements Asn1BerDecoder,Asn1JsonDecoder{

      public Asn1Type decode(Asn1JsonDecodeBuffer buffer) throws java.io.IOException
      {
         return TicketDataObject_class_.valueOf( TicketDataObject_class_.parseJSONValue( buffer.readString() ) );
      }
      public Asn1Type decode(Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength) throws Asn1Exception, java.io.IOException
      {
         return TicketDataObject_class_.valueOf( buffer.decodeEnumValue(explicit, implicitLength) );
      }
   }

   /**
    * Returns the instance associated with the value passed.
    * If the value passed is invalid, an exception is thrown.
    */
   public static TicketDataObject_class_ valueOf (int _value)
      throws Asn1InvalidEnumException
   {
      switch ((int)_value) {
         case 0: return club();
         case 1: return lounge();
         case 2: return silver();
         case 3: return gold();
         default: throw new Asn1InvalidEnumException (_value);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      if (!(getValue() == 0 ||
            getValue() == 1 ||
            getValue() == 2 ||
            getValue() == 3))
      {
         throw new Asn1InvalidEnumException (getValue());
      }

      int _aal = super.encode (buffer, explicit);

      return (_aal);
   }

   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.encodeString(toJSONString());
   }


   public String toString(){
      switch ((int)value) {
         case 0: return ("club");
         case 1: return ("lounge");
         case 2: return ("silver");
         case 3: return ("gold");
         default: return ("UNDEFINED");
      }
   }

   public  static int parseValue (String value_)
   {
      if (value_.equals ("club"))
         return 0;
      else if (value_.equals ("lounge"))
         return 1;
      else if (value_.equals ("silver"))
         return 2;
      else if (value_.equals ("gold"))
         return 3;
      else return Asn1Enumerated.UNDEFINED;
   }

   public  String toJSONString(){
      return toString();
   }

   public static int parseJSONValue (String value_)
   {
      return parseValue(value_);
   }

}
