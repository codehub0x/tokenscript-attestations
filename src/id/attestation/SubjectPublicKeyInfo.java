/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 19-Nov-2019.
 */
package id.attestation;

import com.objsys.asn1j.runtime.*;

public class SubjectPublicKeyInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SubjectPublicKeyInfo";
   }

   public AlgorithmIdentifier algorithm;
   public Asn1BitString subjectPublicKey;

   public SubjectPublicKeyInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SubjectPublicKeyInfo (
      AlgorithmIdentifier algorithm_,
      Asn1BitString subjectPublicKey_
   ) {
      super();
      algorithm = algorithm_;
      subjectPublicKey = subjectPublicKey_;
   }

   public void init () {
      algorithm = null;
      subjectPublicKey = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return algorithm;
         case 1: return subjectPublicKey;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "algorithm";
         case 1: return "subjectPublicKey";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode algorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("algorithm", -1);

         algorithm = new AlgorithmIdentifier();
         algorithm.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("algorithm", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "algorithm");

      // decode subjectPublicKey

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 3, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("subjectPublicKey", -1);

         subjectPublicKey = new Asn1BitString();
         subjectPublicKey.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("subjectPublicKey", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "subjectPublicKey");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 3))  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode subjectPublicKey

      if (subjectPublicKey != null) {
         buffer.getContext().eventDispatcher.startElement("subjectPublicKey", -1);

         len = subjectPublicKey.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("subjectPublicKey", -1);
      }
      else throw new Asn1MissingRequiredException ("subjectPublicKey");

      // encode algorithm

      if (algorithm != null) {
         buffer.getContext().eventDispatcher.startElement("algorithm", -1);

         len = algorithm.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("algorithm", -1);
      }
      else throw new Asn1MissingRequiredException ("algorithm");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      init();
      /* decode as JSON object */
      boolean[] elementKeysPresent_ = new boolean[2];
      buffer.readCharacter('{');
      if ( buffer.nextCharacterIsNot('}') ) {
         String current_json_identifier;
         for(;;)  {
            current_json_identifier = buffer.readString();
            buffer.readCharacter(':');
            if (current_json_identifier.equals("algorithm") ) {
               if ( elementKeysPresent_[0] ){
                  throw new Asn1SetDuplicateException("algorithm");
               }
               elementKeysPresent_[0] = true;
               algorithm = new AlgorithmIdentifier();
               algorithm.decode(buffer);
            }
            else if (current_json_identifier.equals("subjectPublicKey") ) {
               if ( elementKeysPresent_[1] ){
                  throw new Asn1SetDuplicateException("subjectPublicKey");
               }
               elementKeysPresent_[1] = true;
               subjectPublicKey = new Asn1BitString();
               subjectPublicKey.decode(buffer);
            }
            else  {
               throw new Asn1Exception("unexpected elem: " + current_json_identifier);
            }

            if (buffer.nextCharacterIs(',')) {
               buffer.readCharacter(',');
               // loop around for next element
            }
            else break; //no more elems to decode

         }
      }
      buffer.readCharacter('}');
      if (algorithm == null) {
         throw new Asn1MissingRequiredException("algorithm");
      }
      if (subjectPublicKey == null) {
         throw new Asn1MissingRequiredException("subjectPublicKey");
      }
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      /* encode algorithm */
      if (algorithm == null) {
         throw new Asn1MissingRequiredException("algorithm");
      }
      outstream.write('"');
      outstream.write("algorithm");
      outstream.write("\":");
      algorithm.encode(outstream);

      /* encode subjectPublicKey */
      if (subjectPublicKey == null) {
         throw new Asn1MissingRequiredException("subjectPublicKey");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("subjectPublicKey");
      outstream.write("\":");
      subjectPublicKey.encode(outstream);

      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
