/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 19-Nov-2019.
 */
package id.attestation;

import com.objsys.asn1j.runtime.*;

public class Time extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Time";
   }

   // Choice element identifier constants
   public final static byte _UTCTIME = 1;
   public final static byte _GENERALTIME = 2;

   public Time () {
      super();
   }

   public Time (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UTCTIME: return "utcTime";
      case _GENERALTIME: return "generalTime";
      default: return "UNDEFINED";
      }
   }

   public void set_utcTime (Asn1UTCTime value) {
      setElement (_UTCTIME, value);
   }

   public void set_generalTime (Asn1GeneralizedTime value) {
      setElement (_GENERALTIME, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23))
      {
         buffer.reset();
         Asn1UTCTime utcTime;
         buffer.getContext().eventDispatcher.startElement("utcTime", -1);

         utcTime = new Asn1UTCTime (false);
         utcTime.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("utcTime", -1);
         setElement (_UTCTIME, utcTime);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
      {
         buffer.reset();
         Asn1GeneralizedTime generalTime;
         buffer.getContext().eventDispatcher.startElement("generalTime", -1);

         generalTime = new Asn1GeneralizedTime (false);
         generalTime.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("generalTime", -1);
         setElement (_GENERALTIME, generalTime);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode utcTime
      case _UTCTIME:
         Asn1UTCTime utcTime = (Asn1UTCTime) getElement();
         buffer.getContext().eventDispatcher.startElement("utcTime", -1);

         len = utcTime.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("utcTime", -1);
         break;

      // encode generalTime
      case _GENERALTIME:
         Asn1GeneralizedTime generalTime = (Asn1GeneralizedTime) getElement();
         buffer.getContext().eventDispatcher.startElement("generalTime", -1);

         len = generalTime.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("generalTime", -1);
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      String _choiceId;
      buffer.readCharacter('{');
      _choiceId = buffer.readString();
      buffer.readCharacter(':');
      if (_choiceId.equals("utcTime") ) {
         Asn1UTCTime utcTime = new Asn1UTCTime();
         utcTime.decode(buffer);
         setElement(_UTCTIME, utcTime);
      }
      else if (_choiceId.equals("generalTime") ) {
         Asn1GeneralizedTime generalTime = new Asn1GeneralizedTime();
         generalTime.decode(buffer);
         setElement(_GENERALTIME, generalTime);
      }
      else  {
         throw new Asn1Exception("unexpected elem: " + _choiceId);
      }
      buffer.readCharacter('}');
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      switch(choiceID) {
         case Time._UTCTIME : 
         {
            outstream.write('"');
            outstream.write("utcTime");
            outstream.write("\":");
            ((Asn1UTCTime)element).encode(outstream);
            break;
         }

         case Time._GENERALTIME : 
         {
            outstream.write('"');
            outstream.write("generalTime");
            outstream.write("\":");
            ((Asn1GeneralizedTime)element).encode(outstream);
            break;
         }

         default:  {
            throw new Asn1InvalidChoiceOptionException ();
         }
      }
      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
