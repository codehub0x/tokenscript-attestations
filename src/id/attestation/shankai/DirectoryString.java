/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 25-Nov-2019.
 */
package id.attestation.shankai;

import com.objsys.asn1j.runtime.*;

public class DirectoryString extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "DirectoryString";
   }

   // Choice element identifier constants
   public final static byte _UTF8STRING = 1;
   public final static byte _PRINTABLESTRING = 2;
   public final static byte _TELETEXSTRING = 3;
   public final static byte _UNIVERSALSTRING = 4;
   public final static byte _BMPSTRING = 5;

   public DirectoryString () {
      super();
   }

   public DirectoryString (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UTF8STRING: return "utf8String";
      case _PRINTABLESTRING: return "printableString";
      case _TELETEXSTRING: return "teletexString";
      case _UNIVERSALSTRING: return "universalString";
      case _BMPSTRING: return "bmpString";
      default: return "UNDEFINED";
      }
   }

   public void set_utf8String (Asn1UTF8String value) {
      setElement (_UTF8STRING, value);
   }

   public void set_printableString (Asn1PrintableString value) {
      setElement (_PRINTABLESTRING, value);
   }

   public void set_teletexString (Asn1T61String value) {
      setElement (_TELETEXSTRING, value);
   }

   public void set_universalString (Asn1UniversalString value) {
      setElement (_UNIVERSALSTRING, value);
   }

   public void set_bmpString (Asn1BMPString value) {
      setElement (_BMPSTRING, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 12))
      {
         buffer.reset();
         Asn1UTF8String utf8String;
         buffer.getContext().eventDispatcher.startElement("utf8String", -1);

         utf8String = new Asn1UTF8String();
         utf8String.decode (buffer, true, len);
         if (!(utf8String.getLength() >= 1)) {
            throw new Asn1ConsVioException ("utf8String.getLength()", utf8String.getLength());
         }

         buffer.getContext().eventDispatcher.endElement("utf8String", -1);
         setElement (_UTF8STRING, utf8String);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 19))
      {
         buffer.reset();
         Asn1PrintableString printableString;
         buffer.getContext().eventDispatcher.startElement("printableString", -1);

         printableString = new Asn1PrintableString();
         printableString.decode (buffer, true, len);
         if (!(printableString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("printableString.getLength()", printableString.getLength());
         }

         buffer.getContext().eventDispatcher.endElement("printableString", -1);
         setElement (_PRINTABLESTRING, printableString);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 20))
      {
         buffer.reset();
         Asn1T61String teletexString;
         buffer.getContext().eventDispatcher.startElement("teletexString", -1);

         teletexString = new Asn1T61String();
         teletexString.decode (buffer, true, len);
         if (!(teletexString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("teletexString.getLength()", teletexString.getLength());
         }

         buffer.getContext().eventDispatcher.endElement("teletexString", -1);
         setElement (_TELETEXSTRING, teletexString);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 28))
      {
         buffer.reset();
         Asn1UniversalString universalString;
         buffer.getContext().eventDispatcher.startElement("universalString", -1);

         universalString = new Asn1UniversalString();
         universalString.decode (buffer, true, len);
         if (!(universalString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("universalString.getLength()", universalString.getLength());
         }

         buffer.getContext().eventDispatcher.endElement("universalString", -1);
         setElement (_UNIVERSALSTRING, universalString);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 30))
      {
         buffer.reset();
         Asn1BMPString bmpString;
         buffer.getContext().eventDispatcher.startElement("bmpString", -1);

         bmpString = new Asn1BMPString();
         bmpString.decode (buffer, true, len);
         if (!(bmpString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("bmpString.getLength()", bmpString.getLength());
         }

         buffer.getContext().eventDispatcher.endElement("bmpString", -1);
         setElement (_BMPSTRING, bmpString);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode utf8String
      case _UTF8STRING:
         Asn1UTF8String utf8String = (Asn1UTF8String) getElement();
         buffer.getContext().eventDispatcher.startElement("utf8String", -1);

         if (!(utf8String.getLength() >= 1)) {
            throw new Asn1ConsVioException ("utf8String.getLength()", utf8String.getLength());
         }

         len = utf8String.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("utf8String", -1);
         break;

      // encode printableString
      case _PRINTABLESTRING:
         Asn1PrintableString printableString = (Asn1PrintableString) getElement();
         buffer.getContext().eventDispatcher.startElement("printableString", -1);

         if (!(printableString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("printableString.getLength()", printableString.getLength());
         }

         len = printableString.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("printableString", -1);
         break;

      // encode teletexString
      case _TELETEXSTRING:
         Asn1T61String teletexString = (Asn1T61String) getElement();
         buffer.getContext().eventDispatcher.startElement("teletexString", -1);

         if (!(teletexString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("teletexString.getLength()", teletexString.getLength());
         }

         len = teletexString.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("teletexString", -1);
         break;

      // encode universalString
      case _UNIVERSALSTRING:
         Asn1UniversalString universalString = (Asn1UniversalString) getElement();
         buffer.getContext().eventDispatcher.startElement("universalString", -1);

         if (!(universalString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("universalString.getLength()", universalString.getLength());
         }

         len = universalString.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("universalString", -1);
         break;

      // encode bmpString
      case _BMPSTRING:
         Asn1BMPString bmpString = (Asn1BMPString) getElement();
         buffer.getContext().eventDispatcher.startElement("bmpString", -1);

         if (!(bmpString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("bmpString.getLength()", bmpString.getLength());
         }

         len = bmpString.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("bmpString", -1);
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      String _choiceId;
      buffer.readCharacter('{');
      _choiceId = buffer.readString();
      buffer.readCharacter(':');
      if (_choiceId.equals("utf8String") ) {
         Asn1UTF8String utf8String = new Asn1UTF8String();
         utf8String.decode(buffer);
         if (!(utf8String.getLength() >= 1)) {
            throw new Asn1ConsVioException ("utf8String.getLength()", utf8String.getLength());
         }

         setElement(_UTF8STRING, utf8String);
      }
      else if (_choiceId.equals("printableString") ) {
         Asn1PrintableString printableString = new Asn1PrintableString();
         printableString.decode(buffer);
         if (!(printableString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("printableString.getLength()", printableString.getLength());
         }

         setElement(_PRINTABLESTRING, printableString);
      }
      else if (_choiceId.equals("teletexString") ) {
         Asn1T61String teletexString = new Asn1T61String();
         teletexString.decode(buffer);
         if (!(teletexString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("teletexString.getLength()", teletexString.getLength());
         }

         setElement(_TELETEXSTRING, teletexString);
      }
      else if (_choiceId.equals("universalString") ) {
         Asn1UniversalString universalString = new Asn1UniversalString();
         universalString.decode(buffer);
         if (!(universalString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("universalString.getLength()", universalString.getLength());
         }

         setElement(_UNIVERSALSTRING, universalString);
      }
      else if (_choiceId.equals("bmpString") ) {
         Asn1BMPString bmpString = new Asn1BMPString();
         bmpString.decode(buffer);
         if (!(bmpString.getLength() >= 1)) {
            throw new Asn1ConsVioException ("bmpString.getLength()", bmpString.getLength());
         }

         setElement(_BMPSTRING, bmpString);
      }
      else  {
         throw new Asn1Exception("unexpected elem: " + _choiceId);
      }
      buffer.readCharacter('}');
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      switch(choiceID) {
         case DirectoryString._UTF8STRING : 
         {
            outstream.write('"');
            outstream.write("utf8String");
            outstream.write("\":");
            if (!(((Asn1UTF8String)element).getLength() >= 1)) {
               throw new Asn1ConsVioException ("((Asn1UTF8String)element).getLength()", ((Asn1UTF8String)element).getLength());
            }

            ((Asn1UTF8String)element).encode(outstream);
            break;
         }

         case DirectoryString._PRINTABLESTRING : 
         {
            outstream.write('"');
            outstream.write("printableString");
            outstream.write("\":");
            if (!(((Asn1PrintableString)element).getLength() >= 1)) {
               throw new Asn1ConsVioException ("((Asn1PrintableString)element).getLength()", ((Asn1PrintableString)element).getLength());
            }

            ((Asn1PrintableString)element).encode(outstream);
            break;
         }

         case DirectoryString._TELETEXSTRING : 
         {
            outstream.write('"');
            outstream.write("teletexString");
            outstream.write("\":");
            if (!(((Asn1T61String)element).getLength() >= 1)) {
               throw new Asn1ConsVioException ("((Asn1T61String)element).getLength()", ((Asn1T61String)element).getLength());
            }

            ((Asn1T61String)element).encode(outstream);
            break;
         }

         case DirectoryString._UNIVERSALSTRING : 
         {
            outstream.write('"');
            outstream.write("universalString");
            outstream.write("\":");
            if (!(((Asn1UniversalString)element).getLength() >= 1)) {
               throw new Asn1ConsVioException ("((Asn1UniversalString)element).getLength()", ((Asn1UniversalString)element).getLength());
            }

            ((Asn1UniversalString)element).encode(outstream);
            break;
         }

         case DirectoryString._BMPSTRING : 
         {
            outstream.write('"');
            outstream.write("bmpString");
            outstream.write("\":");
            if (!(((Asn1BMPString)element).getLength() >= 1)) {
               throw new Asn1ConsVioException ("((Asn1BMPString)element).getLength()", ((Asn1BMPString)element).getLength());
            }

            ((Asn1BMPString)element).encode(outstream);
            break;
         }

         default:  {
            throw new Asn1InvalidChoiceOptionException ();
         }
      }
      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
