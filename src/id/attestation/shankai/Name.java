/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 25-Nov-2019.
 */
package id.attestation.shankai;

import com.objsys.asn1j.runtime.*;

public class Name extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Name";
   }

   // Choice element identifier constants
   public final static byte _RDNSEQUENCE = 1;

   public Name () {
      super();
   }

   public Name (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _RDNSEQUENCE: return "rdnSequence";
      default: return "UNDEFINED";
      }
   }

   public void set_rdnSequence (RDNSequence value) {
      setElement (_RDNSEQUENCE, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         RDNSequence rdnSequence;
         buffer.getContext().eventDispatcher.startElement("rdnSequence", -1);

         rdnSequence = new RDNSequence();
         rdnSequence.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("rdnSequence", -1);
         setElement (_RDNSEQUENCE, rdnSequence);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode rdnSequence
      case _RDNSEQUENCE:
         RDNSequence rdnSequence = (RDNSequence) getElement();
         buffer.getContext().eventDispatcher.startElement("rdnSequence", -1);

         len = rdnSequence.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("rdnSequence", -1);
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      String _choiceId;
      buffer.readCharacter('{');
      _choiceId = buffer.readString();
      buffer.readCharacter(':');
      if (_choiceId.equals("rdnSequence") ) {
         RDNSequence rdnSequence = new RDNSequence();
         rdnSequence.decode(buffer);
         setElement(_RDNSEQUENCE, rdnSequence);
      }
      else  {
         throw new Asn1Exception("unexpected elem: " + _choiceId);
      }
      buffer.readCharacter('}');
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      switch(choiceID) {
         case Name._RDNSEQUENCE : 
         {
            outstream.write('"');
            outstream.write("rdnSequence");
            outstream.write("\":");
            ((RDNSequence)element).encode(outstream);
            break;
         }

         default:  {
            throw new Asn1InvalidChoiceOptionException ();
         }
      }
      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
