/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.4.2, Date: 22-Jul-2020.
 */
package dk.alexandra.stormbird.cheque.asnobjects;

import com.objsys.asn1j.runtime.*;

public class RelativeDistinguishedName extends Asn1SetOf {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_InformationFrameworkRtkey._rtkey);
      Asn1Type._setLicLocation(_InformationFrameworkRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "RelativeDistinguishedName";
   }

   public AttributeTypeAndValue[] elements;

   public RelativeDistinguishedName () {
      elements = null;
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given number of elements.  The element values must be manually 
    * populated.
    */
   public RelativeDistinguishedName (int numRecords) {
      elements = new AttributeTypeAndValue [numRecords];
   }

   /**
    * This constructor initializes the internal array to hold the 
    * given the array.  
    */
   public RelativeDistinguishedName (AttributeTypeAndValue[] elements_) {
      elements = elements_;
   }

   public Asn1Type[] getElementValues() { return elements; }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SET) : implicitLength;

      // decode SEQUENCE OF or SET OF

      java.util.LinkedList<AttributeTypeAndValue> llist =
         new java.util.LinkedList<AttributeTypeAndValue>();
      Asn1BerDecodeContext _context =
          new Asn1BerDecodeContext (buffer, llen);
      AttributeTypeAndValue element;
      int elemLen = 0;
      int i = 0;

      while (!_context.expired()) {
         buffer.getContext().eventDispatcher.startElement("elements", i++);

         element = new AttributeTypeAndValue();
         element.decode (buffer, true, elemLen);

         buffer.getContext().eventDispatcher.endElement("elements", i);
         llist.add (element);
      }

      elements = new AttributeTypeAndValue [llist.size()];
      llist.toArray (elements);

      if (!(elements.length >= 1)) {
         throw new Asn1ConsVioException ("elements.length", elements.length);
      }

   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode SEQUENCE OF or SET OF

      if (!(this.elements.length >= 1)) {
         throw new Asn1ConsVioException ("this.elements.length", this.elements.length);
      }

      Asn1BerEncodeBuffer savedBuffer = buffer;
      buffer = new Asn1DerEncodeBuffer();
      Asn1OctetString[] lelems_ = new Asn1OctetString [elements.length];

      for (int i = elements.length - 1; i >= 0; i--) {
         buffer.getContext().eventDispatcher.startElement("elements[" + i + "]", -1);

         len = this.elements[i].encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("elements[" + i + "]", -1);
         lelems_[i] = new Asn1OctetString (buffer.getMsgCopy());
         buffer.reset();
      }

      buffer = savedBuffer;
      java.util.Arrays.sort (lelems_);

      for (int i = elements.length - 1; i >= 0; i--) {
         lelems_[i].encode (buffer, false);
      }

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SET, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      if (elements != null) {
         for (int i = 0; i < elements.length; i++) {
            String name = _varName + " [" + i + "]";
            elements[i].print (_out, name, _level);
         }
      }
   }

}
