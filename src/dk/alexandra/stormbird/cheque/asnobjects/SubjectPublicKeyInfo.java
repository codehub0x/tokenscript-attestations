/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.4.2, Date: 22-Jul-2020.
 */
package dk.alexandra.stormbird.cheque.asnobjects;

import com.objsys.asn1j.runtime.*;

public class SubjectPublicKeyInfo extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_AttestationFrameworkRtkey._rtkey);
      Asn1Type._setLicLocation(_AttestationFrameworkRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SubjectPublicKeyInfo";
   }

   // Choice element identifier constants
   public final static byte _NULL_ = 1;
   public final static byte _VALUE = 2;

   public SubjectPublicKeyInfo () {
      super();
   }

   public SubjectPublicKeyInfo (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _NULL_: return "null_";
      case _VALUE: return "value";
      default: return "UNDEFINED";
      }
   }

   public void set_null_ () {
      setElement (_NULL_, Asn1Null.NULL_VALUE);
   }

   public void set_value (SubjectPublicKeyInfoValue value) {
      setElement (_VALUE, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 5))
      {
         buffer.reset();
         Asn1Null lnull__;
         buffer.getContext().eventDispatcher.startElement("null_", -1);

         lnull__ = new Asn1Null();
         lnull__.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("null_", -1);
         setElement (_NULL_, lnull__);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
      {
         buffer.reset();
         SubjectPublicKeyInfoValue lvalue_;
         buffer.getContext().eventDispatcher.startElement("value", -1);

         lvalue_ = new SubjectPublicKeyInfoValue();
         lvalue_.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("value", -1);
         setElement (_VALUE, lvalue_);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode null_
      case _NULL_:
         Asn1Null lnull__ = (Asn1Null) getElement();
         buffer.getContext().eventDispatcher.startElement("null_", -1);

         len = lnull__.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("null_", -1);
         break;

      // encode value
      case _VALUE:
         SubjectPublicKeyInfoValue lvalue_ = (SubjectPublicKeyInfoValue) getElement();
         buffer.getContext().eventDispatcher.startElement("value", -1);

         len = lvalue_.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("value", -1);
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
