/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.4.2, Date: 22-Jul-2020.
 */
package dk.alexandra.stormbird.cheque.asnobjects;

import com.objsys.asn1j.runtime.*;

public class AlgorithmIdentifier extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_AuthenticationFrameworkRtkey._rtkey);
      Asn1Type._setLicLocation(_AuthenticationFrameworkRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "AlgorithmIdentifier";
   }

   public Asn1ObjectIdentifier algorithm;
   public Asn1OpenType parameters;  // optional

   public AlgorithmIdentifier () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public AlgorithmIdentifier (
      Asn1ObjectIdentifier algorithm_,
      Asn1OpenType parameters_
   ) {
      super();
      algorithm = algorithm_;
      parameters = parameters_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public AlgorithmIdentifier (
      Asn1ObjectIdentifier algorithm_
   ) {
      super();
      algorithm = algorithm_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public AlgorithmIdentifier (int[] algorithm_,
      Asn1OpenType parameters_
   ) {
      super();
      algorithm = new Asn1ObjectIdentifier (algorithm_);
      parameters = parameters_;
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public AlgorithmIdentifier (
      int[] algorithm_
   ) {
      super();
      algorithm = new Asn1ObjectIdentifier (algorithm_);
   }

   public void init () {
      algorithm = null;
      parameters = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return algorithm;
         case 1: return parameters;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "algorithm";
         case 1: return "parameters";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode algorithm

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("algorithm", -1);

         this.algorithm = new Asn1ObjectIdentifier();
         this.algorithm.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("algorithm", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "algorithm");

      // decode parameters

      if (!_context.expired ()) {
         buffer.getContext().eventDispatcher.startElement("parameters", -1);

         parameters = new Asn1OpenType();
         parameters.decode (buffer, true, 0);

         buffer.getContext().eventDispatcher.endElement("parameters", -1);
      }

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode parameters

      if (this.parameters != null) {
         buffer.getContext().eventDispatcher.startElement("parameters", -1);

         len = this.parameters.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("parameters", -1);
      }

      // encode algorithm

      if (this.algorithm != null) {
         buffer.getContext().eventDispatcher.startElement("algorithm", -1);

         len = this.algorithm.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("algorithm", -1);
      }
      else throw new Asn1MissingRequiredException ("algorithm");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (algorithm != null) algorithm.print (_out, "algorithm", _level+1);
      if (parameters != null) parameters.print (_out, "parameters", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
