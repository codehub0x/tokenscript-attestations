/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 25-Nov-2019.
 */
package id.attestation.shankai;

import com.objsys.asn1j.runtime.*;

public class SignedInfo extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "SignedInfo";
   }

   public Version version;
   public CertificateSerialNumber serialNumber;
   public AlgorithmIdentifier signature;
   public SubjectPublicKeyInfo subjectPublicKeyInfo;
   public TicketDataObject dataObject;

   public SignedInfo () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public SignedInfo (
      Version version_,
      CertificateSerialNumber serialNumber_,
      AlgorithmIdentifier signature_,
      SubjectPublicKeyInfo subjectPublicKeyInfo_,
      TicketDataObject dataObject_
   ) {
      super();
      version = version_;
      serialNumber = serialNumber_;
      signature = signature_;
      subjectPublicKeyInfo = subjectPublicKeyInfo_;
      dataObject = dataObject_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public SignedInfo (long version_,
      long serialNumber_,
      AlgorithmIdentifier signature_,
      SubjectPublicKeyInfo subjectPublicKeyInfo_,
      TicketDataObject dataObject_
   ) {
      super();
      version = new Version (version_);
      serialNumber = new CertificateSerialNumber (serialNumber_);
      signature = signature_;
      subjectPublicKeyInfo = subjectPublicKeyInfo_;
      dataObject = dataObject_;
   }

   public void init () {
      version = null;
      serialNumber = null;
      signature = null;
      subjectPublicKeyInfo = null;
      dataObject = null;
   }

   public int getElementCount() { return 5; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return version;
         case 1: return serialNumber;
         case 2: return signature;
         case 3: return subjectPublicKeyInfo;
         case 4: return dataObject;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "version";
         case 1: return "serialNumber";
         case 2: return "signature";
         case 3: return "subjectPublicKeyInfo";
         case 4: return "dataObject";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode version

      if (_context.matchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
         int offset = buffer.getByteCount();
         buffer.getContext().eventDispatcher.startElement("version", -1);

         version = new Version();
         version.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("version", -1);

         int declen = buffer.getByteCount() - offset;
         if (declen != elemLen.value && elemLen.value != Asn1Status.INDEFLEN)
            throw new Asn1InvalidLengthException();

         if (elemLen.value == Asn1Status.INDEFLEN) {
            matchTag (buffer, Asn1Tag.EOC);
         }
      }
      else throw new Asn1MissingRequiredException (buffer, "version");

      // decode serialNumber

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("serialNumber", -1);

         serialNumber = new CertificateSerialNumber();
         serialNumber.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("serialNumber", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "serialNumber");

      // decode signature

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("signature", -1);

         signature = new AlgorithmIdentifier();
         signature.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("signature", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "signature");

      // decode subjectPublicKeyInfo

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("subjectPublicKeyInfo", -1);

         subjectPublicKeyInfo = new SubjectPublicKeyInfo();
         subjectPublicKeyInfo.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("subjectPublicKeyInfo", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "subjectPublicKeyInfo");

      // decode dataObject

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("dataObject", -1);

         dataObject = new TicketDataObject();
         dataObject.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("dataObject", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "dataObject");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.CTXT, Asn1Tag.CONS, 0) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode dataObject

      if (dataObject != null) {
         buffer.getContext().eventDispatcher.startElement("dataObject", -1);

         len = dataObject.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("dataObject", -1);
      }
      else throw new Asn1MissingRequiredException ("dataObject");

      // encode subjectPublicKeyInfo

      if (subjectPublicKeyInfo != null) {
         buffer.getContext().eventDispatcher.startElement("subjectPublicKeyInfo", -1);

         len = subjectPublicKeyInfo.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("subjectPublicKeyInfo", -1);
      }
      else throw new Asn1MissingRequiredException ("subjectPublicKeyInfo");

      // encode signature

      if (signature != null) {
         buffer.getContext().eventDispatcher.startElement("signature", -1);

         len = signature.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("signature", -1);
      }
      else throw new Asn1MissingRequiredException ("signature");

      // encode serialNumber

      if (serialNumber != null) {
         buffer.getContext().eventDispatcher.startElement("serialNumber", -1);

         len = serialNumber.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("serialNumber", -1);
      }
      else throw new Asn1MissingRequiredException ("serialNumber");

      // encode version

      if (version != null) {
         buffer.getContext().eventDispatcher.startElement("version", -1);

         len = version.encode (buffer, true);
         len += buffer.encodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("version", -1);
      }
      else throw new Asn1MissingRequiredException ("version");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      init();
      /* decode as JSON object */
      boolean[] elementKeysPresent_ = new boolean[5];
      buffer.readCharacter('{');
      if ( buffer.nextCharacterIsNot('}') ) {
         String current_json_identifier;
         for(;;)  {
            current_json_identifier = buffer.readString();
            buffer.readCharacter(':');
            if (current_json_identifier.equals("version") ) {
               if ( elementKeysPresent_[0] ){
                  throw new Asn1SetDuplicateException("version");
               }
               elementKeysPresent_[0] = true;
               version = new Version();
               version.decode(buffer);
            }
            else if (current_json_identifier.equals("serialNumber") ) {
               if ( elementKeysPresent_[1] ){
                  throw new Asn1SetDuplicateException("serialNumber");
               }
               elementKeysPresent_[1] = true;
               serialNumber = new CertificateSerialNumber();
               serialNumber.decode(buffer);
            }
            else if (current_json_identifier.equals("signature") ) {
               if ( elementKeysPresent_[2] ){
                  throw new Asn1SetDuplicateException("signature");
               }
               elementKeysPresent_[2] = true;
               signature = new AlgorithmIdentifier();
               signature.decode(buffer);
            }
            else if (current_json_identifier.equals("subjectPublicKeyInfo") ) {
               if ( elementKeysPresent_[3] ){
                  throw new Asn1SetDuplicateException("subjectPublicKeyInfo");
               }
               elementKeysPresent_[3] = true;
               subjectPublicKeyInfo = new SubjectPublicKeyInfo();
               subjectPublicKeyInfo.decode(buffer);
            }
            else if (current_json_identifier.equals("dataObject") ) {
               if ( elementKeysPresent_[4] ){
                  throw new Asn1SetDuplicateException("dataObject");
               }
               elementKeysPresent_[4] = true;
               dataObject = new TicketDataObject();
               dataObject.decode(buffer);
            }
            else  {
               throw new Asn1Exception("unexpected elem: " + current_json_identifier);
            }

            if (buffer.nextCharacterIs(',')) {
               buffer.readCharacter(',');
               // loop around for next element
            }
            else break; //no more elems to decode

         }
      }
      buffer.readCharacter('}');
      if (version == null) {
         throw new Asn1MissingRequiredException("version");
      }
      if (serialNumber == null) {
         throw new Asn1MissingRequiredException("serialNumber");
      }
      if (signature == null) {
         throw new Asn1MissingRequiredException("signature");
      }
      if (subjectPublicKeyInfo == null) {
         throw new Asn1MissingRequiredException("subjectPublicKeyInfo");
      }
      if (dataObject == null) {
         throw new Asn1MissingRequiredException("dataObject");
      }
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      /* encode version */
      if (version == null) {
         throw new Asn1MissingRequiredException("version");
      }
      outstream.write('"');
      outstream.write("version");
      outstream.write("\":");
      version.encode(outstream);

      /* encode serialNumber */
      if (serialNumber == null) {
         throw new Asn1MissingRequiredException("serialNumber");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("serialNumber");
      outstream.write("\":");
      serialNumber.encode(outstream);

      /* encode signature */
      if (signature == null) {
         throw new Asn1MissingRequiredException("signature");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("signature");
      outstream.write("\":");
      signature.encode(outstream);

      /* encode subjectPublicKeyInfo */
      if (subjectPublicKeyInfo == null) {
         throw new Asn1MissingRequiredException("subjectPublicKeyInfo");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("subjectPublicKeyInfo");
      outstream.write("\":");
      subjectPublicKeyInfo.encode(outstream);

      /* encode dataObject */
      if (dataObject == null) {
         throw new Asn1MissingRequiredException("dataObject");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("dataObject");
      outstream.write("\":");
      dataObject.encode(outstream);

      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
