/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 25-Nov-2019.
 */
package id.attestation.shankai;

import com.objsys.asn1j.runtime.*;

public class Validity extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Validity";
   }

   public Time notBefore;
   public Time notAfter;

   public Validity () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Validity (
      Time notBefore_,
      Time notAfter_
   ) {
      super();
      notBefore = notBefore_;
      notAfter = notAfter_;
   }

   public void init () {
      notBefore = null;
      notAfter = null;
   }

   public int getElementCount() { return 2; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return notBefore;
         case 1: return notAfter;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "notBefore";
         case 1: return "notAfter";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode notBefore

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
         {
            buffer.getContext().eventDispatcher.startElement("notBefore", -1);

            notBefore = new Time();
            notBefore.decode (buffer, true, elemLen.value);

            buffer.getContext().eventDispatcher.endElement("notBefore", -1);
         }
         else throw new Asn1MissingRequiredException (buffer, "notBefore");
      }
      else throw new Asn1MissingRequiredException (buffer, "notBefore");

      // decode notAfter

      if (!_context.expired()) {
         Asn1Tag tag = buffer.peekTag ();
         if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23) ||
             tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
         {
            buffer.getContext().eventDispatcher.startElement("notAfter", -1);

            notAfter = new Time();
            notAfter.decode (buffer, true, elemLen.value);

            buffer.getContext().eventDispatcher.endElement("notAfter", -1);
         }
         else throw new Asn1MissingRequiredException (buffer, "notAfter");
      }
      else throw new Asn1MissingRequiredException (buffer, "notAfter");

      if (!_context.expired()) {

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode notAfter

      if (notAfter != null) {
         buffer.getContext().eventDispatcher.startElement("notAfter", -1);

         len = notAfter.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("notAfter", -1);
      }
      else throw new Asn1MissingRequiredException ("notAfter");

      // encode notBefore

      if (notBefore != null) {
         buffer.getContext().eventDispatcher.startElement("notBefore", -1);

         len = notBefore.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("notBefore", -1);
      }
      else throw new Asn1MissingRequiredException ("notBefore");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      init();
      /* decode as JSON object */
      boolean[] elementKeysPresent_ = new boolean[2];
      buffer.readCharacter('{');
      if ( buffer.nextCharacterIsNot('}') ) {
         String current_json_identifier;
         for(;;)  {
            current_json_identifier = buffer.readString();
            buffer.readCharacter(':');
            if (current_json_identifier.equals("notBefore") ) {
               if ( elementKeysPresent_[0] ){
                  throw new Asn1SetDuplicateException("notBefore");
               }
               elementKeysPresent_[0] = true;
               notBefore = new Time();
               notBefore.decode(buffer);
            }
            else if (current_json_identifier.equals("notAfter") ) {
               if ( elementKeysPresent_[1] ){
                  throw new Asn1SetDuplicateException("notAfter");
               }
               elementKeysPresent_[1] = true;
               notAfter = new Time();
               notAfter.decode(buffer);
            }
            else  {
               throw new Asn1Exception("unexpected elem: " + current_json_identifier);
            }

            if (buffer.nextCharacterIs(',')) {
               buffer.readCharacter(',');
               // loop around for next element
            }
            else break; //no more elems to decode

         }
      }
      buffer.readCharacter('}');
      if (notBefore == null) {
         throw new Asn1MissingRequiredException("notBefore");
      }
      if (notAfter == null) {
         throw new Asn1MissingRequiredException("notAfter");
      }
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      /* encode notBefore */
      if (notBefore == null) {
         throw new Asn1MissingRequiredException("notBefore");
      }
      outstream.write('"');
      outstream.write("notBefore");
      outstream.write("\":");
      notBefore.encode(outstream);

      /* encode notAfter */
      if (notAfter == null) {
         throw new Asn1MissingRequiredException("notAfter");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("notAfter");
      outstream.write("\":");
      notAfter.encode(outstream);

      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
