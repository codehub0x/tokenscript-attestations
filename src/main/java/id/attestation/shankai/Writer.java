/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 25-Nov-2019.
 */
package id.attestation.shankai;

import com.objsys.asn1j.runtime.*;
import java.util.*;

public class Writer {

   /* PDU: TICKET_ATTESTATION.Attestation */
   public static void main(String args[]) {

      String filename = new String ("message.dat");
      boolean trace = true;
      
      if (args.length > 0) {
         for (int i = 0; i < args.length; i++) {
            if (args[i].equals ("-v"))
               Diag.instance().setEnabled (true);
            else if (args[i].equals ("-o"))
               filename = new String (args[++i]);
            else if (args[i].equals ("-notrace")) trace = false;
            else {
               System.out.println("usage: Writer [-v] [-o <filename>]");
               System.out.println("   -v  verbose mode: print trace info");
               System.out.println("   -o <filename>  " +
                                          "write encoded msg to <filename>");
               System.out.println("   -notrace  do not display trace info");
               System.exit(1);
            }
         }
      }
      
      // Create a message buffer object
      Asn1BerEncodeBuffer encodeBuffer =
         new Asn1BerEncodeBuffer ();
      try {
         id.attestation.shankai.Attestation attestation;
         attestation = new id.attestation.shankai.Attestation();

         attestation.signedInfo = new SignedInfo();

         attestation.signedInfo.version = new Version(0);

         attestation.signedInfo.serialNumber = new CertificateSerialNumber(0);

         attestation.signedInfo.signature = new AlgorithmIdentifier(9);

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[0] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[1] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[2] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[3] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[4] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[5] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[6] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[7] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signedInfo.signature.elements[8] = new Asn1ObjectIdentifier(oidData);
         }

         attestation.signedInfo.subjectPublicKeyInfo = new SubjectPublicKeyInfo();

         attestation.signedInfo.subjectPublicKeyInfo.algorithm = new AlgorithmIdentifier(0);

         attestation.signedInfo.subjectPublicKeyInfo.subjectPublicKey = new Asn1BitString("'10000011000110111'B");

         attestation.signedInfo.dataObject = new TicketDataObject();

         attestation.signedInfo.dataObject.match = new Asn1Integer(1L);

         attestation.signedInfo.dataObject.class_ = TicketDataObject_class_.lounge();

         attestation.signedInfo.dataObject.admission = new Asn1Integer(0);

         attestation.signatureAlgorithm = new AlgorithmIdentifier(4);

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signatureAlgorithm.elements[0] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signatureAlgorithm.elements[1] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signatureAlgorithm.elements[2] = new Asn1ObjectIdentifier(oidData);
         }

         {
            int[] oidData = {
               0, 1, 2, 3, 4
            };
            attestation.signatureAlgorithm.elements[3] = new Asn1ObjectIdentifier(oidData);
         }

         attestation.signatureValue = new Asn1BitString("'000111011111111110'B");
         attestation.encode (encodeBuffer);
         if (trace) {
            System.out.println("Encoding was successful");
            System.out.println("Hex dump of encoded record:");
            encodeBuffer.hexDump ();
            System.out.println("Binary dump:");
            encodeBuffer.binDump ();
            // Write the encoded record to a file
            encodeBuffer.write (new java.io.FileOutputStream (filename));
         }
      }
      catch (Exception e) {
         System.out.println(e.getMessage());
         e.printStackTrace();
         System.exit(1);
      }
      finally {
         Asn1Util.closeRuntime();
      }
   }
}
