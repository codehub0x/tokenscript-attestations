/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.3.4, Date: 25-Nov-2019.
 */
package id.attestation.shankai;

import com.objsys.asn1j.runtime.*;

public class TicketDataObject extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_TICKET_ATTESTATIONRtkey._rtkey);
      Asn1Type._setLicLocation(_TICKET_ATTESTATIONRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "TicketDataObject";
   }

   public Asn1Integer match;
   public TicketDataObject_class_ class_ = null;
   public Asn1Integer admission;

   public TicketDataObject () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public TicketDataObject (
      Asn1Integer match_,
      TicketDataObject_class_ class__,
      Asn1Integer admission_
   ) {
      super();
      match = match_;
      class_ = class__;
      admission = admission_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public TicketDataObject (long match_,
      TicketDataObject_class_ class__,
      long admission_
   ) {
      super();
      match = new Asn1Integer (match_);
      class_ = class__;
      admission = new Asn1Integer (admission_);
   }

   public void init () {
      match = null;
      class_ = null;
      admission = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return match;
         case 1: return class_;
         case 2: return admission;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "match";
         case 1: return "class";
         case 2: return "admission";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode match

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("match", -1);

         match = new Asn1Integer();
         match.decode (buffer, true, elemLen.value);
         if (!((match.value >= 1 && match.value <= 51))) {
            throw new Asn1ConsVioException ("match.value", match.value);
         }

         buffer.getContext().eventDispatcher.endElement("match", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "match");

      // decode class_

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 10, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("class_", -1);

         int tval = buffer.decodeEnumValue (TicketDataObject_class_.TAG, true, elemLen.value);
         class_ = TicketDataObject_class_.valueOf (tval);

         buffer.getContext().eventDispatcher.endElement("class_", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "class_");

      // decode admission

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 2, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("admission", -1);

         admission = new Asn1Integer();
         admission.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("admission", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "admission");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 2) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 10))  {
            throw new Asn1UnexpectedElementException();
         }

      }
      if (explicit && llen == Asn1Status.INDEFLEN) {
         matchTag (buffer, Asn1Tag.EOC);
      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode admission

      if (admission != null) {
         buffer.getContext().eventDispatcher.startElement("admission", -1);

         len = admission.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("admission", -1);
      }
      else throw new Asn1MissingRequiredException ("admission");

      // encode class_

      if (class_ != null) {
         buffer.getContext().eventDispatcher.startElement("class_", -1);

         len = class_.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("class_", -1);
      }
      else throw new Asn1MissingRequiredException ("class_");

      // encode match

      if (match != null) {
         buffer.getContext().eventDispatcher.startElement("match", -1);

         if (!((match.value >= 1 && match.value <= 51))) {
            throw new Asn1ConsVioException ("match.value", match.value);
         }

         len = match.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("match", -1);
      }
      else throw new Asn1MissingRequiredException ("match");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void decode( Asn1JsonDecodeBuffer buffer ) throws java.io.IOException
   {
      init();
      /* decode as JSON object */
      boolean[] elementKeysPresent_ = new boolean[3];
      buffer.readCharacter('{');
      if ( buffer.nextCharacterIsNot('}') ) {
         String current_json_identifier;
         for(;;)  {
            current_json_identifier = buffer.readString();
            buffer.readCharacter(':');
            if (current_json_identifier.equals("match") ) {
               if ( elementKeysPresent_[0] ){
                  throw new Asn1SetDuplicateException("match");
               }
               elementKeysPresent_[0] = true;
               match = new Asn1Integer();
               match.decode(buffer);
               if (!((match.value >= 1 && match.value <= 51))) {
                  throw new Asn1ConsVioException ("match.value", match.value);
               }

            }
            else if (current_json_identifier.equals("class") ) {
               if ( elementKeysPresent_[1] ){
                  throw new Asn1SetDuplicateException("class");
               }
               elementKeysPresent_[1] = true;
               class_ = TicketDataObject_class_.valueOf( TicketDataObject_class_.parseJSONValue( buffer.readString() ) );
            }
            else if (current_json_identifier.equals("admission") ) {
               if ( elementKeysPresent_[2] ){
                  throw new Asn1SetDuplicateException("admission");
               }
               elementKeysPresent_[2] = true;
               admission = new Asn1Integer();
               admission.decode(buffer);
            }
            else  {
               throw new Asn1Exception("unexpected elem: " + current_json_identifier);
            }

            if (buffer.nextCharacterIs(',')) {
               buffer.readCharacter(',');
               // loop around for next element
            }
            else break; //no more elems to decode

         }
      }
      buffer.readCharacter('}');
      if (match == null) {
         throw new Asn1MissingRequiredException("match");
      }
      if (class_ == null) {
         throw new Asn1MissingRequiredException("class");
      }
      if (admission == null) {
         throw new Asn1MissingRequiredException("admission");
      }
   }


   public void encode( Asn1JsonOutputStream outstream ) throws java.io.IOException
   {
      outstream.write('{');
      outstream.incrLevel();
      outstream.indent();
      /* encode match */
      if (match == null) {
         throw new Asn1MissingRequiredException("match");
      }
      outstream.write('"');
      outstream.write("match");
      outstream.write("\":");
      if (!((match.value >= 1 && match.value <= 51))) {
         throw new Asn1ConsVioException ("match.value", match.value);
      }

      match.encode(outstream);

      /* encode class */
      if (class_ == null) {
         throw new Asn1MissingRequiredException("class");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("class");
      outstream.write("\":");
      class_.encode(outstream);

      /* encode admission */
      if (admission == null) {
         throw new Asn1MissingRequiredException("admission");
      }
      outstream.write(',');
      outstream.indent();
      outstream.write('"');
      outstream.write("admission");
      outstream.write("\":");
      admission.encode(outstream);

      outstream.decrLevel();
      outstream.indent();
      outstream.write('}');
   }


}
