/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.4.2, Date: 22-Jul-2020.
 */
package dk.alexandra.stormbird.cheque.asnobjects;

import com.objsys.asn1j.runtime.*;

public class Extension extends Asn1Seq {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_AuthenticationFrameworkRtkey._rtkey);
      Asn1Type._setLicLocation(_AuthenticationFrameworkRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Extension";
   }

   public Asn1ObjectIdentifier extnId;
   public Asn1Boolean critical;  // default = false()
   public Asn1OctetString extnValue;

   public Extension () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public Extension (
      Asn1ObjectIdentifier extnId_,
      Asn1Boolean critical_,
      Asn1OctetString extnValue_
   ) {
      super();
      extnId = extnId_;
      critical = critical_;
      extnValue = extnValue_;
   }

   /**
    * This constructor is for required elements only.  It sets 
    * all elements to references to the given objects
    */
   public Extension (
      Asn1ObjectIdentifier extnId_,
      Asn1OctetString extnValue_
   ) {
      super();
      extnId = extnId_;
      critical = new Asn1Boolean (false);
      extnValue = extnValue_;
   }

   /**
    * This constructor allows primitive data to be passed for all 
    * primitive elements.  It will create new object wrappers for 
    * the primitive data and set other elements to references to 
    * the given objects 
    */
   public Extension (int[] extnId_,
      boolean critical_,
      byte[] extnValue_
   ) {
      super();
      extnId = new Asn1ObjectIdentifier (extnId_);
      critical = new Asn1Boolean (critical_);
      extnValue = new Asn1OctetString (extnValue_);
   }

   /**
    * This constructor is for required elements only.  It allows 
    * primitive data to be passed for all primitive elements.  
    * It will create new object wrappers for the primitive data 
    * and set other elements to references to the given objects. 
    */
   public Extension (
      int[] extnId_,
      byte[] extnValue_
   ) {
      super();
      extnId = new Asn1ObjectIdentifier (extnId_);
      critical = new Asn1Boolean (false);
      extnValue = new Asn1OctetString (extnValue_);
   }

   public void init () {
      extnId = null;
      critical = new Asn1Boolean (false);
      extnValue = null;
   }

   public int getElementCount() { return 3; }


   public Object getElementValue(int index){
      switch(index)  {
         case 0: return extnId;
         case 1: return critical;
         case 2: return extnValue;
         default: return null;
      }
   }


   public String getElementName(int index){
      switch(index)  {
         case 0: return "extnId";
         case 1: return "critical";
         case 2: return "extnValue";
         default: return null;
      }
   }


   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode extnId

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 6, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("extnId", -1);

         this.extnId = new Asn1ObjectIdentifier();
         this.extnId.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("extnId", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "extnId");

      // decode critical

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 1, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("critical", -1);

         this.critical = new Asn1Boolean();
         this.critical.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("critical", -1);
      }

      // decode extnValue

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.PRIM, 4, elemLen, false)) {
         buffer.getContext().eventDispatcher.startElement("extnValue", -1);

         this.extnValue = new Asn1OctetString();
         this.extnValue.decode (buffer, true, elemLen.value);

         buffer.getContext().eventDispatcher.endElement("extnValue", -1);
      }
      else throw new Asn1MissingRequiredException (buffer, "extnValue");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 6) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 1) ||
             _tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 4))  {
            throw new Asn1SeqOrderException ();
         }
         else  {
            throw new Asn1UnexpectedElementException();
         }

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode extnValue

      if (this.extnValue != null) {
         buffer.getContext().eventDispatcher.startElement("extnValue", -1);

         len = this.extnValue.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("extnValue", -1);
      }
      else throw new Asn1MissingRequiredException ("extnValue");

      // encode critical

      if (this.critical != null) {
         if (!this.critical.equals (false)) {
            buffer.getContext().eventDispatcher.startElement("critical", -1);

            len = this.critical.encode (buffer, true);
            _aal += len;

            buffer.getContext().eventDispatcher.endElement("critical", -1);
         }
      }

      // encode extnId

      if (this.extnId != null) {
         buffer.getContext().eventDispatcher.startElement("extnId", -1);

         len = this.extnId.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("extnId", -1);
      }
      else throw new Asn1MissingRequiredException ("extnId");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (extnId != null) extnId.print (_out, "extnId", _level+1);
      if (critical != null) critical.print (_out, "critical", _level+1);
      if (extnValue != null) extnValue.print (_out, "extnValue", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }

}
