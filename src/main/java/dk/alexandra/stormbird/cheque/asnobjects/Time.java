/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.4.2, Date: 22-Jul-2020.
 */
package dk.alexandra.stormbird.cheque.asnobjects;

import com.objsys.asn1j.runtime.*;

public class Time extends Asn1Choice {
   private static final long serialVersionUID = 55;
   static {
      _setKey (_AuthenticationFrameworkRtkey._rtkey);
      Asn1Type._setLicLocation(_AuthenticationFrameworkRtkey._licLocation);
   }

   public String getAsn1TypeName()  {
      return "Time";
   }

   // Choice element identifier constants
   public final static byte _UTCTIME = 1;
   public final static byte _GENERALIZEDTIME = 2;

   public Time () {
      super();
   }

   public Time (byte choiceId_, Asn1Type element_) {
      super();
      setElement (choiceId_, element_);
   }

   public String getElemName () {
      switch (choiceID) {
      case _UTCTIME: return "utcTime";
      case _GENERALIZEDTIME: return "generalizedTime";
      default: return "UNDEFINED";
      }
   }

   public void set_utcTime (Asn1UTCTime value) {
      setElement (_UTCTIME, value);
   }

   public void set_generalizedTime (Asn1GeneralizedTime value) {
      setElement (_GENERALIZEDTIME, value);
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = implicitLength;

      // decode CHOICE

      Asn1Tag tag = new Asn1Tag ();
      buffer.mark (8);
      int len = buffer.decodeTagAndLength (tag);
      final int choiceLen = len;

      int offset = buffer.getByteCount(), declen;

      if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 23))
      {
         buffer.reset();
         Asn1UTCTime lutcTime_;
         buffer.getContext().eventDispatcher.startElement("utcTime", -1);

         lutcTime_ = new Asn1UTCTime (true);
         lutcTime_.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("utcTime", -1);
         setElement (_UTCTIME, lutcTime_);
      }
      else if (tag.equals (Asn1Tag.UNIV, Asn1Tag.PRIM, 24))
      {
         buffer.reset();
         Asn1GeneralizedTime lgeneralizedTime_;
         buffer.getContext().eventDispatcher.startElement("generalizedTime", -1);

         lgeneralizedTime_ = new Asn1GeneralizedTime (true);
         lgeneralizedTime_.decode (buffer, true, len);

         buffer.getContext().eventDispatcher.endElement("generalizedTime", -1);
         setElement (_GENERALIZEDTIME, lgeneralizedTime_);
      }
      else {
         throw new Asn1InvalidChoiceOptionException (buffer, tag);
      }

      declen = buffer.getByteCount() - offset;
      if (choiceLen != Asn1Status.INDEFLEN && choiceLen != declen)
         throw new Asn1InvalidLengthException();
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;
      switch (choiceID) {
      // encode utcTime
      case _UTCTIME:
         Asn1UTCTime lutcTime_ = (Asn1UTCTime) getElement();
         buffer.getContext().eventDispatcher.startElement("utcTime", -1);

         len = lutcTime_.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("utcTime", -1);
         break;

      // encode generalizedTime
      case _GENERALIZEDTIME:
         Asn1GeneralizedTime lgeneralizedTime_ = (Asn1GeneralizedTime) getElement();
         buffer.getContext().eventDispatcher.startElement("generalizedTime", -1);

         len = lgeneralizedTime_.encode (buffer, true);
         _aal += len;

         buffer.getContext().eventDispatcher.endElement("generalizedTime", -1);
         break;

      default:
         throw new Asn1InvalidChoiceOptionException();
      }

      return _aal;
   }

   public void print (java.io.PrintWriter _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (element != null) {
         element.print (_out, getElemName(), _level+1);
      }
      indent (_out, _level);
      _out.println ("}");
   }

}
